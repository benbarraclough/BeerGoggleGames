---
import Layout from '../components/Layout.astro';
import { getCollection } from 'astro:content';
import { excludeLegacyNoise } from '../lib/filters';
import { withBase } from '../lib/paths';
import { canonical } from '../lib/urls';
import CardLink from '../components/CardLink.astro';

const allGames = excludeLegacyNoise(await getCollection('games'));
const recentGames = allGames.slice(0, 6);

const posts = excludeLegacyNoise(await getCollection('posts'))
  .filter(p => !p.data.draft)
  .sort((a,b) => (b.data.date || '').localeCompare(a.data.date || ''))
  .slice(0, 3);

const cocktails = excludeLegacyNoise(await getCollection('cocktails')).slice(0,3);
const shots = excludeLegacyNoise(await getCollection('shots')).slice(0,3);

const pageCanonical = canonical(Astro.url.pathname, Astro.site);
---
<Layout title="BeerGoggleGames" description="Drinking games, cocktail & shot recipes, and party extras." canonical={pageCanonical} wide={false}>
  <h1 class="font-display text-4xl mb-6">BeerGoggleGames</h1>
  <p class="text-muted mb-10 max-w-prose">Drinking games, cocktail & shot recipes, and party extras. Fast, clean, mobile-ready.</p>

  <section class="mb-12">
    <h2 class="font-display text-2xl mb-4">Latest Games</h2>
    <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 list-none p-0 m-0">
      {recentGames.map(g => {
        const slug = (g.slug ?? g.id).split('/').pop();
        const type = g.data.type || 'misc';
        const href = withBase(`games/${type}/${slug}/`);
        return (
          <CardLink
            href={href}
            ariaLabel={`View game: ${g.data.title}`}
          >
            <span class="font-semibold leading-snug transition-colors group-hover:text-neon">
              {g.data.title}
            </span>
            {g.data.excerpt && (
              <span class="mt-2 text-xs text-muted line-clamp-2">
                {g.data.excerpt}
              </span>
            )}
          </CardLink>
        );
      })}
    </ul>
    <p class="mt-4 text-sm">
      <a class="hover:text-neon underline underline-offset-4" href={withBase('games/')}>Browse all game types →</a>
    </p>
  </section>

  <section class="mb-12">
    <h2 class="font-display text-2xl mb-4">Drinks</h2>
    <div class="grid gap-6 lg:grid-cols-2">
      <div>
        <h3 class="font-semibold mb-3">Cocktails</h3>
        <ul class="grid gap-3 list-none p-0 m-0">
          {cocktails.map(c => {
            const slug = (c.slug ?? c.id).split('/').pop();
            return (
              <CardLink
                href={withBase(`drinks/cocktail-recipes/${slug}/`)}
                ariaLabel={`View cocktail: ${c.data.title}`}
                as="li"
                noPadding
                anchorClass="p-3"
              >
                <span class="font-medium transition-colors group-hover:text-neon">
                  {c.data.title}
                </span>
              </CardLink>
            );
          })}
        </ul>
        <p class="mt-3 text-xs">
          <a class="hover:text-neon underline underline-offset-4" href={withBase('drinks/cocktail-recipes/')}>All cocktails →</a>
        </p>
      </div>
      <div>
        <h3 class="font-semibold mb-3">Shots</h3>
        <ul class="grid gap-3 list-none p-0 m-0">
          {shots.map(s => {
            const slug = (s.slug ?? s.id).split('/').pop();
            return (
              <CardLink
                href={withBase(`drinks/shot-recipes/${slug}/`)}
                ariaLabel={`View shot: ${s.data.title}`}
                as="li"
                noPadding
                anchorClass="p-3"
              >
                <span class="font-medium transition-colors group-hover:text-neon">
                  {s.data.title}
                </span>
              </CardLink>
            );
          })}
        </ul>
        <p class="mt-3 text-xs">
          <a class="hover:text-neon underline underline-offset-4" href={withBase('drinks/shot-recipes/')}>All shots →</a>
        </p>
      </div>
    </div>
  </section>

  {posts.length > 0 && (
    <section class="mb-12">
      <h2 class="font-display text-2xl mb-4">From the Blog</h2>
      <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 list-none p-0 m-0">
        {posts.map(p => {
          const slug = (p.slug ?? p.id).split('/').pop();
          return (
            <CardLink
              href={withBase(`blog/${slug}/`)}
              ariaLabel={`Read post: ${p.data.title}`}
            >
              <span class="font-semibold leading-snug transition-colors group-hover:text-neon">
                {p.data.title}
              </span>
              {p.data.excerpt && (
                <span class="mt-2 text-xs text-muted line-clamp-2">
                  {p.data.excerpt}
                </span>
              )}
            </CardLink>
          );
        })}
      </ul>
    </section>
  )}
</Layout>
