---
import Layout from '../../components/Layout.astro';
import { getCollection, getEntry } from 'astro:content';
import DrinkMeta from '../../components/drink/DrinkMeta.astro';
import GameHero from '../../components/game/GameHero.astro'; // reuse styling
import { canonical } from '../../lib/urls';
import { withBase } from '../../lib/paths';

export async function getStaticPaths() {
  const entries = await getCollection('drinks');
  return entries.map(e => {
    const slug = (e.slug ?? e.id);
    return { params: { slug } };
  });
}

const rawSlug = Astro.params.slug;
const slug = rawSlug.replace(/\.mdx$/i, '');

let entry = await getEntry('drinks', slug);
if (!entry) {
  const all = await getCollection('drinks');
  const available = all.map(e => e.slug ?? e.id).join(', ');
  throw new Error(`Drink not found for slug "${slug}". Available: ${available}`);
}

const { Content } = await entry.render();

const cover = entry.data.cover
  ? withBase(`images/${entry.data.cover}`)
  : withBase(`images/${slug}.webp`);

const pageCanonical = canonical(Astro.url.pathname, Astro.site);
const pageTitle = entry.data.title;
const description = entry.data.excerpt || `Drink recipe: ${pageTitle}`;

// derive bases (singular base merged in transform -> bases[]; but in case you created base only manually):
const bases = (entry.data.bases && entry.data.bases.length)
  ? entry.data.bases
  : (entry.data.base ? [entry.data.base] : []);

const drinkType = entry.data.drinkType;
const difficulty = entry.data.difficulty;
const tags = entry.data.tags || [];

/**
 * Detect whether the MDX already includes a <DrinkHero> to prevent double hero.
 * We only have the rendered html if we inspect Content beforehand, which is not ideal.
 * Easiest: user manually removes <DrinkHero> from MDX over time.
 * For now we always show hero here; if you still have MDX heroes, remove them.
 */
const showHero = true;
---
<Layout
  title={pageTitle}
  description={description}
  canonical={pageCanonical}
>
  <article class="prose-invert max-w-none">
    <DrinkMeta
      title={pageTitle}
      excerpt={description}
      drinkType={drinkType}
      difficulty={difficulty}
      bases={bases}
      tags={tags}
    />

    {showHero && (
      <figure class="relative mb-8 aspect-[16/7] overflow-hidden rounded-xl border border-fg/20">
        <GameHero cover={cover} alt={pageTitle} />
      </figure>
    )}

    <Content />
  </article>
</Layout>
