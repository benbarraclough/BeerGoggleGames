---
import Layout from '../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { canonical } from '../../lib/urls';
import { withBase } from '../../lib/paths';

export async function getStaticPaths() {
  const entries = await getCollection('drinks');
  const leafMap = new Map<string, any>();
  const duplicates: string[] = [];
  for (const e of entries) {
    const leaf = (e.slug ?? e.id).split('/').pop()!;
    if (leafMap.has(leaf)) duplicates.push(leaf);
    else leafMap.set(leaf, e);
  }
  if (duplicates.length) {
    throw new Error(
      `[drinks] Duplicate leaf slug(s) detected: ${duplicates.join(', ')}. Leaves must be unique.`
    );
  }
  return Array.from(leafMap.keys()).map(leaf => ({ params: { slug: leaf } }));
}

const leaf = Astro.params.slug;
const allEntries = await getCollection('drinks');
const leafMap = new Map<string, any>();
for (const e of allEntries) {
  const l = (e.slug ?? e.id).split('/').pop()!;
  if (!leafMap.has(l)) leafMap.set(l, e);
}
const entry = leafMap.get(leaf);
if (!entry) throw new Error(`Drink not found for leaf "${leaf}"`);

const { Content } = await entry.render();

const data = entry.data;
const title = data.title;
const description =
  data.excerpt ||
  data.description ||
  `Drink recipe: ${title}`;

const drinkType = (data.drinkType || '').toString();
const difficulty = (data.difficulty || '').toString();
const baseList: string[] = Array.isArray(data.bases)
  ? data.bases
  : data.base
    ? [data.base]
    : [];
const tags: string[] = Array.isArray(data.tags) ? data.tags : [];

const coverFile = data.cover || `${leaf}.webp`;
const cover = withBase(`images/${coverFile}`);

/* Frontmatter override (optional):
   If you set hero: false in a drink file, we won't render the figure.
*/
const heroDisabled = data.hero === false;

const pageCanonical = canonical(Astro.url.pathname, Astro.site);

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'Recipe',
  name: title,
  description,
  recipeCategory: drinkType || 'drink',
  keywords: [...tags, drinkType, difficulty, ...baseList].filter(Boolean).join(', ')
};
---
<Layout title={title} description={description} canonical={pageCanonical} image={cover}>
  <article class="prose-invert max-w-none">
    <header class="drink-meta mb-6">
      <h1 class="font-display text-4xl mb-2">{title}</h1>
      {description && (
        <p class="text-lg text-muted mb-4 leading-relaxed max-w-prose">
          {description}
        </p>
      )}
      <div class="flex flex-wrap gap-2 meta-pills">
        {drinkType && <span class="mode-pill" aria-label={`Drink type: ${drinkType}`}>{drinkType}</span>}
        {baseList.map(b => (
          <span class="mode-pill mode-pill-base" aria-label={`Base: ${b}`}>{b}</span>
        ))}
        {difficulty && (
          <span class="mode-pill mode-pill-diff" aria-label={`Difficulty: ${difficulty}`}>
            {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
          </span>
        )}
        {tags.map(t => (
          <span class="tag-pill" aria-label={`Tag: ${t}`}>{t}</span>
        ))}
      </div>
    </header>

    {!heroDisabled && (
      <figure class="relative mb-8 aspect-[16/7] overflow-hidden rounded-xl border border-fg/20">
        <img
          src={cover}
          alt={title}
          class="w-full h-full object-cover brightness-90 saturate-110 transition-transform duration-700 hover:scale-105"
          loading="lazy"
          decoding="async"
          onerror="this.style.display='none'"
        />
        <div class="absolute inset-0 bg-gradient-to-tr from-bg/80 via-bg/20 to-transparent pointer-events-none"></div>
      </figure>
    )}

    <!-- MDX drink content (sections, lists, etc.) -->
    <Content />

    <p class="mt-10 text-xs text-muted">
      <a class="hover:text-neon underline underline-offset-4" href={withBase('drinks/')}>Back to Drinks Index</a>
    </p>
  </article>

  <style>
    .mode-pill {
      @apply inline-flex items-center gap-1 rounded-md border border-fg/20 bg-fg/10 px-3 py-1 text-[11px] font-semibold uppercase tracking-wide;
      line-height:1;
    }
    .mode-pill-base { @apply border-blue-400/30 bg-blue-500/15 text-blue-100; }
    .mode-pill-diff { @apply border-pink-400/30 bg-pink-500/15 text-pink-200; }
    .tag-pill {
      @apply inline-flex items-center rounded-full border border-fg/15 bg-fg/10 px-2 py-1 text-[10px] font-medium;
    }
  </style>

  <!-- GLOBAL list fallback (covers any plain MDX lists not wrapped by DrinkSection) -->
  <style is:global>
    article.prose-invert ul,
    article.prose-invert ol {
      list-style: revert;
      padding-left: 1.25rem;
      margin: 0 0 1rem;
    }
    article.prose-invert li { margin: 0.25rem 0; }
    article.prose-invert li::marker { color: var(--fg-muted, currentColor); }
  </style>

  <script type="application/ld+json">
    {JSON.stringify(jsonLd, null, 2)}
  </script>
</Layout>
