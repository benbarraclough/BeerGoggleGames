---
import Layout from '../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../../lib/paths';
import { canonical } from '../../lib/urls';
import { excludeLegacyNoise } from '../../lib/filters';

/*
  Unified Drinks Index
  Uses the single 'drinks' content collection (files in src/content/drinks/*.mdx).

  Filters:
    - Drink Type (frontmatter: drinkType)
    - Alcohol Base (frontmatter: bases[] or base)
    - Difficulty (frontmatter: difficulty)

  Logic:
    - Default: OR across all selected filters (any match shows)
    - Exclusive: AND across groups (OR within each group)
*/

interface DrinkMeta {
  title: string;
  drinkType: string;
  bases: string[];
  basesLC: string[];
  difficulty: string;
  slug: string;
  href: string;
  image: string;
}

function collectBases(data: any): string[] {
  if (Array.isArray(data.bases) && data.bases.length) {
    return data.bases.map((b: any) => (b ?? '').toString().trim()).filter(Boolean);
  }
  if (data.base) {
    return [data.base].map((b: any) => (b ?? '').toString().trim()).filter(Boolean);
  }
  return [];
}

const entries = excludeLegacyNoise(await getCollection('drinks'));
const drinks: DrinkMeta[] = entries
  .map(e => {
    const slug = (e.slug ?? e.id).split('/').pop();
    const drinkType = (e.data.drinkType || 'drink').toString().trim().toLowerCase();
    const bases = collectBases(e.data);
    const difficulty = (e.data.difficulty || '').toString().trim().toLowerCase();
    return {
      title: e.data.title,
      drinkType,
      bases,
      basesLC: bases.map(b => b.toLowerCase()),
      difficulty,
      slug,
      href: withBase(`drinks/${slug}/`),
      image: withBase(`images/${slug}.webp`)
    };
  })
  .sort((a,b)=> (a.title||'').localeCompare(b.title||''));

const typeCounts = new Map<string, number>();
const baseCounts = new Map<string, number>();
const diffCounts = new Map<string, number>();
for (const d of drinks) {
  typeCounts.set(d.drinkType, (typeCounts.get(d.drinkType) || 0) + 1);
  d.bases.forEach(b => baseCounts.set(b, (baseCounts.get(b) || 0) + 1));
  if (d.difficulty) diffCounts.set(d.difficulty, (diffCounts.get(d.difficulty) || 0) + 1);
}

const drinkTypes = Array.from(typeCounts.entries()).sort((a,b)=> a[0].localeCompare(b[0]));
const bases = Array.from(baseCounts.entries()).sort((a,b)=> a[0].localeCompare(b[0]));
const diffOrder = ['easy','medium','hard'];
const difficulties = Array.from(diffCounts.entries()).sort((a,b)=>{
  const ai = diffOrder.indexOf(a[0]); const bi = diffOrder.indexOf(b[0]);
  if (ai === -1 || bi === -1) return a[0].localeCompare(b[0]);
  return ai - bi;
});

const pageCanonical = canonical(Astro.url.pathname, Astro.site);
---
<Layout
  title="Drinks"
  description="All drink recipes. Filter by type, alcohol base, and difficulty."
  canonical={pageCanonical}
  wide={true}
>
  <h1 class="font-display text-4xl mb-4">Drinks</h1>
  <p class="text-sm text-muted mb-5">
    Unified list of all drinks A–Z. Use the filters to narrow by type, base, or difficulty.
    <span class="block sm:inline mt-1 sm:mt-0">Exclusive = AND across groups (OR within a group).</span>
  </p>

  <!-- Filter Bar -->
  <div id="filter-bar" class="mb-6 space-y-3">
    <div class="flex flex-wrap gap-2 items-center">
      <span class="text-[11px] uppercase tracking-wide text-muted/70">Filters</span>

      <!-- Drink Type -->
      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-type-tint" data-panel="types" aria-expanded="false">
          Drink Type
        </button>
        <div class="filter-panel hidden" id="panel-types" role="group" aria-label="Drink Type">
          <div class="panel-inner">
            {drinkTypes.map(([t,count]) => (
              <button
                type="button"
                class="filter-item pill pill-type"
                data-filter-type="type"
                data-value={t}
                aria-pressed="false"
              >
                <span>{t}</span><span class="count">{count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <!-- Alcohol Base -->
      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-base-tint" data-panel="bases" aria-expanded="false">
          Alcohol Base
        </button>
        <div class="filter-panel hidden" id="panel-bases" role="group" aria-label="Alcohol Base">
          <div class="panel-inner max-h-72">
            {bases.map(([b,count]) => (
              <button
                type="button"
                class="filter-item pill pill-base"
                data-filter-type="base"
                data-value={b.toLowerCase()}
                data-display={b}
                aria-pressed="false"
              >
                <span>{b}</span><span class="count">{count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <!-- Difficulty -->
      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-diff-tint" data-panel="difficulty" aria-expanded="false">
          Difficulty
        </button>
        <div class="filter-panel hidden" id="panel-difficulty" role="group" aria-label="Difficulty">
          <div class="panel-inner">
            {difficulties.map(([d,count]) => (
              <button
                type="button"
                class="filter-item pill pill-diff"
                data-filter-type="difficulty"
                data-value={d}
                aria-pressed="false"
              >
                <span>{d}</span><span class="count">{count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <!-- Exclusive & Clear -->
      <button
        id="exclusive-toggle"
        type="button"
        class="pill pill-neutral"
        aria-pressed="false"
        title="Exclusive: must match each selected group (AND across groups; OR within group)."
      >
        Exclusive
      </button>
      <button
        id="clear-filters"
        type="button"
        class="pill pill-neutral disabled:opacity-40 disabled:cursor-not-allowed"
        disabled
      >
        Clear
      </button>

      <span id="result-count" class="text-xs text-muted ml-auto"></span>
    </div>
  </div>

  <!-- Drinks Grid -->
  {drinks.length === 0 ? (
    <p class="text-muted">No drinks found.</p>
  ) : (
    <ul
      id="drinks-grid"
      class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 list-none p-0 m-0"
    >
      {drinks.map(d => (
        <li
          class="relative group"
          data-type={d.drinkType}
          data-bases={d.basesLC.join(',')}
          data-difficulty={d.difficulty}
        >
          <div class="card-body flex flex-col h-full border border-fg/20 rounded-sm p-4 transition-colors pointer-events-none group-hover:border-neon/40">
            <picture class="mb-2 w-full allow-pointer">
              <img
                src={d.image}
                alt={d.title}
                loading="lazy"
                decoding="async"
                class="w-full aspect-video object-cover rounded-sm border border-fg/15 bg-fg/5"
                onerror="this.style.display='none'"
              />
            </picture>
            <span class="font-semibold leading-snug mb-2 transition-colors allow-pointer group-hover:text-neon">
              {d.title}
            </span>
            <div class="flex flex-wrap gap-2 text-[10px] uppercase tracking-wide font-semibold relative z-10">
              <span class="pill pill-type allow-pointer">{d.drinkType}</span>
              {d.bases.slice(0,3).map(b => <span class="pill pill-base allow-pointer">{b}</span>)}
              {d.bases.length > 3 && (
                <span class="pill pill-base allow-pointer">
                  +{d.bases.length - 3}
                </span>
              )}
              {d.difficulty && <span class="pill pill-diff allow-pointer">{d.difficulty}</span>}
            </div>
          </div>
          <a
            href={d.href}
            aria-label={`View drink: ${d.title}`}
            class="absolute inset-0 rounded-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neon/60"
          >
            <span class="sr-only">{d.title}</span>
          </a>
        </li>
      ))}
    </ul>
  )}

  <style>
    .pill {
      @apply inline-flex items-center gap-1 px-2 py-1 rounded-full text-[10px] font-semibold tracking-wide whitespace-nowrap transition-colors select-none border;
      line-height:1.1;
    }
    .pill-type-tint { @apply bg-orange-500/15 text-orange-300 border-orange-400/30 hover:bg-orange-500/25; }
    .pill-base-tint { @apply bg-blue-500/15 text-blue-300 border-blue-400/30 hover:bg-blue-500/25; }
    .pill-diff-tint { @apply bg-pink-500/15 text-pink-300 border-pink-400/30 hover:bg-pink-500/25; }
    .pill-neutral { @apply bg-fg/10 text-fg/80 border-fg/25 hover:border-neon/50 hover:text-neon; }

    .pill-type { @apply bg-orange-500/10 text-orange-300 border-orange-400/30; }
    .pill-base { @apply bg-blue-500/10 text-blue-300 border-blue-400/30; }
    .pill-diff { @apply bg-pink-500/10 text-pink-300 border-pink-400/30; }

    .filter-toggle[aria-expanded="true"] { @apply ring-2 ring-neon/60; }
    #exclusive-toggle[aria-pressed="true"] { @apply bg-neon/20 text-neon ring-2 ring-neon/50; }
    .filter-item { @apply cursor-pointer; }
    .filter-item[aria-pressed="true"] { @apply ring-2 ring-neon/60; }

    .filter-panel { @apply absolute z-50 mt-2 min-w-[14rem] max-w-xs bg-bg/95 backdrop-blur border border-fg/25 rounded-md shadow-lg p-2; }
    .filter-panel.hidden { display: none; }
    .panel-inner { @apply flex flex-wrap gap-2 overflow-y-auto; max-height: 18rem; }
    .panel-inner::-webkit-scrollbar { width: 6px; }
    .panel-inner::-webkit-scrollbar-thumb { @apply bg-fg/30 rounded; }

    #result-count { @apply text-muted; }

    .card-body { pointer-events: none; }
    .card-body .allow-pointer { pointer-events: auto; }
  </style>

  <!-- External script (no inline JS to avoid token issues) -->
  <script type="module" src={withBase('scripts/drinks-filters.js')}></script>

  <p class="mt-10 text-sm">
    <a class="hover:text-neon underline underline-offset-4" href={withBase('/')}>← Back to Home</a>
  </p>
</Layout>
