---
import Layout from '../../../components/Layout.astro';
import { getCollection } from 'astro:content';

const activities = await getCollection('activities').catch(() => []);
// Sort alphabetically
const sorted = activities.sort((a,b) =>
  (a.data.title || '').localeCompare(b.data.title || '')
);

const difficulties = Array.from(
  new Set(sorted.map(a => (a.data.difficulty || '').trim()).filter(Boolean))
).sort((a,b) => a.localeCompare(b));

const title = 'Activities';
const description = 'Extra party & social activities to complement your games.';
---
<Layout title={title} description={description}>
  <header class="mb-8 flex flex-col gap-5 md:flex-row md:items-end md:justify-between">
    <div>
      <h1 class="font-display text-3xl md:text-4xl mb-2">{title}</h1>
      <p class="text-muted max-w-prose">{description}</p>
    </div>
    <div class="flex flex-wrap gap-4 items-end">
      <label class="flex flex-col gap-1 text-xs font-medium tracking-wide uppercase text-muted">
        Search
        <input
          id="act-search"
          type="search"
            placeholder="Search activities..."
            class="w-56 max-w-[70vw] rounded border border-fg/25 bg-fg/5 px-3 py-2 text-sm focus:border-neon outline-none"
            autocomplete="off"
        />
      </label>
      {difficulties.length > 0 && (
        <label class="flex flex-col gap-1 text-xs font-medium tracking-wide uppercase text-muted">
          Difficulty
          <select
            id="act-difficulty"
            class="w-40 rounded border border-fg/25 bg-fg/5 px-3 py-2 text-sm focus:border-neon outline-none"
          >
            <option value="">All</option>
            {difficulties.map(d => <option value={d}>{d}</option>)}
          </select>
        </label>
      )}
      <button
        id="act-clear"
        class="text-xs mt-2 md:mt-auto underline underline-offset-4 hover:text-neon hidden"
      >Clear</button>
    </div>
  </header>

  {sorted.length === 0 && <p class="text-muted">No activities found.</p>}

  <ul id="act-grid" class="grid gap-5 sm:grid-cols-2 lg:grid-cols-3 list-none p-0 m-0">
    {sorted.map(a => {
      const url = `/extras/activities/${a.slug}/`;
      const difficulty = a.data.difficulty || '';
      return (
        <li
          class="group relative flex flex-col border border-fg/15 rounded p-5 hover:border-neon transition-colors bg-fg/5/10"
          data-title={(a.data.title || '').toLowerCase()}
          data-excerpt={(a.data.excerpt || '').toLowerCase()}
          data-difficulty={difficulty.toLowerCase()}
        >
          <h2 class="font-semibold leading-snug mb-2 group-hover:text-neon">
            <a href={url} class="focus:outline-none focus:ring-2 focus:ring-neon rounded">
              {a.data.title}
            </a>
          </h2>
          {difficulty && (
            <span class="inline-block text-[10px] tracking-wide uppercase bg-fg/10 border border-fg/15 rounded px-2 py-0.5 mb-2">
              {difficulty}
            </span>
          )}
          {a.data.excerpt && <p class="text-xs text-muted leading-relaxed line-clamp-4">{a.data.excerpt}</p>}
          <p class="mt-3">
            <a href={url} class="text-[11px] font-medium tracking-wide uppercase text-neon/80 hover:text-neon">
              View â†’
            </a>
          </p>
        </li>
      );
    })}
  </ul>

  <p id="act-empty" class="hidden italic text-muted mt-10">No activities match your filters.</p>

  <script is:inline>
    (() => {
      const search = document.getElementById('act-search');
      const diff = document.getElementById('act-difficulty');
      const grid = document.getElementById('act-grid');
      const empty = document.getElementById('act-empty');
      const clear = document.getElementById('act-clear');
      if (!grid) return;
      const items = Array.from(grid.children);

      function apply() {
        const q = (search?.value || '').trim().toLowerCase();
        const d = (diff?.value || '').trim().toLowerCase();
        let shown = 0;

        items.forEach(li => {
          const title = li.getAttribute('data-title') || '';
          const excerpt = li.getAttribute('data-excerpt') || '';
          const ld = li.getAttribute('data-difficulty') || '';
          const matchQuery = !q || title.includes(q) || excerpt.includes(q);
          const matchDiff = !d || ld === d;
          const vis = matchQuery && matchDiff;
          li.classList.toggle('hidden', !vis);
          if (vis) shown++;
        });

        empty?.classList.toggle('hidden', shown !== 0);
        clear?.classList.toggle('hidden', !!q || !!d);
      }

      search?.addEventListener('input', apply);
      diff?.addEventListener('change', apply);
      clear?.addEventListener('click', () => {
        if (search) search.value = '';
        if (diff) diff.value = '';
        apply();
      });
    })();
  </script>
</Layout>
