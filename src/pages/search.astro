---
import Layout from '../components/Layout.astro';
import { canonical } from '../lib/urls';
import { base, withBase } from '../lib/paths';

const pageTitle = 'Search';
const pageCanonical = canonical(Astro.url.pathname, Astro.site);
---
<Layout title={pageTitle} canonical={pageCanonical} description="Search games, cocktails, shots, activities & posts.">
  <section class="prose prose-invert max-w-none" data-base={base}>
    <h1 class="!mb-4 !leading-tight !text-fg font-display text-3xl md:text-4xl">{pageTitle}</h1>
    <p class="!mt-0">Type to search games, cocktails, shots, activities, and posts.</p>

    <div class="mb-4">
      <input
        id="q"
        type="search"
        placeholder="e.g. beer pong, vodka, dice..."
        class="w-full border border-fg/30 bg-transparent rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-neon/70"
        aria-label="Search site content"
        autocomplete="off"
      />
    </div>
    <div id="status" class="text-sm text-muted">Loading index…</div>
    <ul id="results" class="mt-4 space-y-2 list-none p-0"></ul>
  </section>

  <script is:inline>
    // base path injected at build
    const BASE = {JSON.stringify(base)};
    const input = document.getElementById('q');
    const list = document.getElementById('results');
    const status = document.getElementById('status');
    let data = [];
    let ready = false;

    function escapeHTML(s) {
      return s.replace(/[&<>"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
    }

    function render(items) {
      list.innerHTML = '';
      if (!items.length) {
        list.innerHTML = '<li class="text-muted text-sm">No results.</li>';
        return;
      }
      const frag = document.createDocumentFragment();
      for (const m of items) {
        const li = document.createElement('li');
        const title = escapeHTML(m.title);
        const type = escapeHTML(m.c + (m.type ? ' · ' + m.type : ''));
        li.innerHTML = \`<a class="hover:text-neon font-medium" href="\${BASE}\${m.c}/\${m.slug}/">\${title}</a>
          <small class="text-muted ml-1">(\${type})</small>\`;
        frag.appendChild(li);
      }
      list.appendChild(frag);
    }

    function doSearch(q) {
      if (!ready) return;
      const term = q.trim().toLowerCase();
      if (!term) {
        list.innerHTML = '';
        status.textContent = 'Enter a term to see results.';
        return;
      }
      status.textContent = '';
      const terms = term.split(/\\s+/);
      const matches = data.filter(item => {
        const hay = (item.title + ' ' +
          (item.excerpt || '') + ' ' +
          (item.type || '') + ' ' +
          (item.ingredients || []).join(' ')
        ).toLowerCase();
        return terms.every(t => hay.includes(t));
      }).slice(0, 100);
      render(matches);
    }

    input.addEventListener('input', () => doSearch(input.value));
    input.addEventListener('keydown', e => {
      if (e.key === 'Enter') { e.preventDefault(); doSearch(input.value); }
    });

    fetch(BASE + 'search-index.json')
      .then(r => r.ok ? r.json() : Promise.reject(r.status))
      .then(json => {
        data = json;
        ready = true;
        status.textContent = 'Index loaded. Start typing.';
      })
      .catch(() => {
        status.textContent = 'Failed to load search index.';
      });
  </script>
</Layout>
