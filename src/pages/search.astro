---
import Layout from '../layouts/Layout.astro'; // If your layout ended up elsewhere, adjust this path.
const pageTitle = 'Search';
const base = import.meta.env.BASE_URL || '/BeerGoggleGames/';
---
<Layout title={pageTitle}>
  <section class="prose max-w-none">
    <h1>{pageTitle}</h1>
    <p>Type to search games, cocktails, shots, activities, posts. Results show live.</p>

    <div class="mb-4">
      <input
        id="q"
        type="search"
        placeholder="e.g. beer pong, vodka, dice..."
        class="w-full border rounded px-3 py-2"
        aria-label="Search site content"
      />
    </div>
    <div id="status" class="text-sm text-gray-500">Loading index…</div>
    <ul id="results" class="list-disc pl-5 space-y-1 mt-3"></ul>
  </section>

  <script type="module">
    const input = document.getElementById('q');
    const list = document.getElementById('results');
    const status = document.getElementById('status');
    let data = [];
    let ready = false;

    function render(items) {
      list.innerHTML = '';
      if (!items.length) {
        list.innerHTML = '<li class="text-gray-500">No results.</li>';
        return;
      }
      const frag = document.createDocumentFragment();
      items.forEach(m => {
        const li = document.createElement('li');
        li.innerHTML = `<a class="text-blue-600 hover:underline" href='${base}${m.c}/${m.slug}/'>${m.title}</a>
          <small class="text-gray-500">(${m.c}${m.type ? ' · ' + m.type : ''})</small>`;
        frag.appendChild(li);
      });
      list.appendChild(frag);
    }

    function doSearch(q) {
      if (!ready) return;
      const term = q.trim().toLowerCase();
      if (!term) {
        list.innerHTML = '';
        status.textContent = 'Enter a term to see results.';
        return;
      }
      status.textContent = '';
      const terms = term.split(/\s+/);
      const matches = data.filter(item => {
        const hay = (item.title + ' ' + item.excerpt + ' ' + item.type + ' ' + (item.ingredients || []).join(' '))
          .toLowerCase();
        return terms.every(t => hay.includes(t));
      }).slice(0, 100);
      render(matches);
    }

    input.addEventListener('input', () => doSearch(input.value));
    input.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        e.preventDefault();
        doSearch(input.value);
      }
    });

    const indexUrl = base + 'search-index.json'; // Works with base path.
    fetch(indexUrl)
      .then(r => r.json())
      .then(json => {
        data = json;
        ready = true;
        status.textContent = 'Index loaded. Start typing.';
      })
      .catch(() => {
        status.textContent = 'Failed to load search index.';
      });
  </script>
</Layout>
