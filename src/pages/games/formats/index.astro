---
import Layout from '../../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../../../lib/paths';
import { playerModeClass, playerModeLabel, playerModeSlug } from '../../../lib/playerMode';

const games = await getCollection('games').catch(()=>[]);

interface ModeBucket {
  slug: string;
  rawValues: Set<string>;
  count: number;
  examples: string[];
}

const buckets = new Map<string, ModeBucket>();

for (const g of games) {
  const raw = g.data.format || g.data.players;
  if (!raw) continue;
  const slug = playerModeSlug(raw);
  if (!buckets.has(slug)) {
    buckets.set(slug, {
      slug,
      rawValues: new Set(),
      count: 0,
      examples: []
    });
  }
  const b = buckets.get(slug)!;
  b.rawValues.add(raw);
  b.count++;
  if (b.examples.length < 8) b.examples.push(g.data.title);
}

const entries = Array.from(buckets.values()).map(b => {
  const sample = Array.from(b.rawValues)[0];
  const label = playerModeLabel(sample);
  return { ...b, label };
}).sort((a,b)=> a.label.localeCompare(b.label));

const total = entries.reduce((n,e)=> n + e.count, 0);
const title = 'Formats';
const description = 'Browse drinking games by format (Team, Pairs, Soloâ€¦).';
---
<Layout title={title} description={description} canonical={Astro.site && new URL(withBase('games/formats/'), Astro.site).href}>
  <h1 class="font-display text-3xl mb-6">{title}</h1>
  <p class="text-sm text-muted mb-6">
    {entries.length === 0
      ? 'No formats found.'
      : `${entries.length} format${entries.length !== 1 ? 's' : ''} covering ${total} game${total !== 1 ? 's' : ''}.`}
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('games/')}>Game Types</a>
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('games/all/')}>All Games</a>
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('tags/')}>Tags</a>
  </p>

  {entries.length === 0 ? (
    <p class="text-muted">Nothing to show.</p>
  ) : (
    <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 list-none p-0 m-0">
      {entries.map(e => (
        <li class="border border-fg/20 p-4 flex flex-col rounded-sm hover:border-neon/40 transition-colors">
          <a
            href={withBase(`games/formats/${e.slug}/`)}
            class={`${playerModeClass(e.slug)} inline-block !text-xs !font-semibold !tracking-wide hover:border-neon/60`}
            aria-label={`Format: ${e.label} (${e.count} games)`}
          >
            {e.label}
          </a>
          <div class="text-xs text-muted mt-2">
            {e.count} game{e.count !== 1 && 's'}
          </div>
          {e.examples.length > 0 && (
            <ul class="mt-3 text-xs space-y-1 text-muted list-disc list-inside">
              {e.examples.map(ex => <li>{ex}</li>)}
            </ul>
          )}
        </li>
      ))}
    </ul>
  )}
</Layout>
