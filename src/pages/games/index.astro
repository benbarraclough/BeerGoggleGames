---
import Layout from '../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../../lib/paths';
import { canonical } from '../../lib/urls';
import { excludeLegacyNoise } from '../../lib/filters';
import { playerModeSlug, playerModeLabel } from '../../lib/playerMode';
import CardLink from '../../components/CardLink.astro';

/*
  Games Page (Tag toggle refinement + improved image fallback)
  - Tag pills hidden by default; show a small inline button: "Show N tags"
  - On expand: renders tag pills, button changes to "Hide N tags"
  - Collapse hides pills again (removes them from DOM for consistent height)
  - Image path tries: g.data.image || /images/games/{leaf}.webp
*/

const raw = excludeLegacyNoise(await getCollection('games'));
const allGames = raw
  .map(g => {
    const type = (g.data.type || 'misc').toString();
    const slugParts = g.slug.split('/');
    const leaf = slugParts[slugParts.length - 1];
    const rawMode = g.data.format || g.data.players;
    const modeSlug = rawMode ? playerModeSlug(rawMode) : '';
    const tags = Array.isArray(g.data.tags) ? g.data.tags : [];
    const providedImage = g.data.image ? withBase(g.data.image.replace(/^\//,''))
      : withBase(`images/games/${leaf}.webp`);
    // Optional extra fallback (uncomment if needed):
    // const image = providedImage; // or try another path if first 404: e.g. /img/games/{leaf}.webp
    return {
      title: g.data.title,
      type,
      rawMode,
      modeSlug,
      tags,
      leaf,
      image: providedImage,
      href: withBase(`games/${type}/${leaf}/`)
    };
  })
  .sort((a,b)=> (a.title||'').localeCompare(b.title||''));

// Distinct sets + counts
const categoryCounts = new Map<string, number>();
const modeCounts = new Map<string, { count: number; label: string }>();
const tagCounts = new Map<string, number>();

for (const g of allGames) {
  categoryCounts.set(g.type, (categoryCounts.get(g.type) || 0) + 1);
  if (g.modeSlug && g.rawMode) {
    const prev = modeCounts.get(g.modeSlug);
    if (prev) prev.count += 1;
    else modeCounts.set(g.modeSlug, { count: 1, label: playerModeLabel(g.rawMode) });
  }
  for (const t of g.tags) {
    tagCounts.set(t, (tagCounts.get(t) || 0) + 1);
  }
}

const categories = Array.from(categoryCounts.entries()).sort((a,b)=> a[0].localeCompare(b[0]));
const modes = Array.from(modeCounts.entries()).sort((a,b)=> a[1].label.localeCompare(b[1].label));
const tags = Array.from(tagCounts.entries()).sort((a,b)=> a[0].localeCompare(b[0]));
const pageCanonical = canonical(Astro.url.pathname, Astro.site);
---
<Layout
  title="Games"
  description="All drinking games. Filter by category, player mode, or tags."
  canonical={pageCanonical}
  wide={true}
>
  <h1 class="font-display text-4xl mb-4">Games</h1>
  <p class="text-sm text-muted mb-5">
    Filter by category, player mode or tags. Default = any match. Exclusive = must satisfy each selected group (and all selected tags). Click “Show tags” on a game to reveal its tags.
  </p>

  <!-- Filter Bar -->
  <div id="filter-bar" class="mb-6 space-y-3">
    <div class="flex flex-wrap gap-2 items-center">
      <span class="text-[11px] uppercase tracking-wide text-muted/70">Filters</span>

      <!-- Category Dropdown -->
      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-cat-tint" data-panel="categories" aria-expanded="false">Categories</button>
        <div class="filter-panel hidden" id="panel-categories" role="group" aria-label="Categories">
          <div class="panel-inner">
            {categories.map(([cat, count]) => (
              <button type="button" class="filter-item pill pill-cat" data-filter-type="category" data-value={cat} aria-pressed="false">
                <span>{cat}</span><span class="count">{count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <!-- Modes Dropdown -->
      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-mode-tint" data-panel="modes" aria-expanded="false">Player Modes</button>
        <div class="filter-panel hidden" id="panel-modes" role="group" aria-label="Player Modes">
          <div class="panel-inner">
            {modes.map(([slug, info]) => (
              <button type="button" class="filter-item pill pill-mode" data-filter-type="mode" data-value={slug} aria-pressed="false">
                <span>{info.label}</span><span class="count">{info.count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <!-- Tags Dropdown -->
      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-tag-tint" data-panel="tags" aria-expanded="false">Tags</button>
        <div class="filter-panel hidden" id="panel-tags" role="group" aria-label="Tags">
          <div class="panel-inner max-h-72">
            {tags.map(([t, count]) => (
              <button type="button" class="filter-item pill pill-tag" data-filter-type="tag" data-value={t} aria-pressed="false">
                <span>{t}</span><span class="count">{count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <!-- Exclusive & Clear -->
      <button id="exclusive-toggle" type="button" class="pill pill-neutral" aria-pressed="false" title="Exclusive: must match each selected group (AND logic across groups; all selected tags).">Exclusive</button>
      <button id="clear-filters" type="button" class="pill pill-neutral disabled:opacity-40 disabled:cursor-not-allowed" disabled>Clear</button>
      <span id="result-count" class="text-xs text-muted ml-auto"></span>
    </div>
  </div>

  <!-- Game Grid -->
  {allGames.length === 0 ? (
    <p class="text-muted">No games found.</p>
  ) : (
    <ul id="game-grid" class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 list-none p-0 m-0">
      {allGames.map(g => (
        <li
          class="list-none p-0 m-0"
          data-type={g.type}
          data-mode={g.modeSlug || ''}
          data-tags={g.tags.join(',')}
        >
          <CardLink href={g.href} overlay ariaLabel={`View game: ${g.title}`} as="div">
            <picture class="mb-2 w-full block">
              <img
                src={g.image}
                alt={g.title}
                loading="lazy"
                decoding="async"
                class="w-full aspect-video object-cover rounded-sm border border-fg/15 bg-fg/5"
                onerror="this.style.display='none'"
              />
            </picture>
            <span class="font-semibold leading-snug mb-2 transition-colors group-hover:text-neon group-focus-within:text-neon">
              {g.title}
            </span>
            <div class="flex flex-wrap gap-2 text-[10px] uppercase tracking-wide font-semibold relative z-20">
              <span class="pill pill-cat">{g.type}</span>
              {g.modeSlug && <span class="pill pill-mode">{playerModeLabel(g.rawMode!)}</span>}
            </div>
            {g.tags.length > 0 && (
              <div class="mt-2 relative z-30">
                <button
                  type="button"
                  class="tag-toggle text-[10px] font-medium text-pink-300 hover:text-pink-200 underline underline-offset-2"
                  data-all-tags={g.tags.join(',')}
                  data-count={g.tags.length}
                  aria-expanded="false"
                >
                  Show {g.tags.length} tag{g.tags.length !== 1 && 's'}
                </button>
                <div class="tags-expand hidden mt-2 flex-wrap gap-2" aria-hidden="true"></div>
              </div>
            )}
          </CardLink>
        </li>
      ))}
    </ul>
  )}

  <style>
    .pill {
      @apply inline-flex items-center gap-1 px-2 py-1 rounded-full text-[10px] font-semibold tracking-wide whitespace-nowrap transition-colors select-none border;
      line-height:1.1;
    }
    /* Tinted toggles */
    .pill-cat-tint { @apply bg-orange-500/15 text-orange-300 border-orange-400/30 hover:bg-orange-500/25; }
    .pill-mode-tint { @apply bg-blue-500/15 text-blue-300 border-blue-400/30 hover:bg-blue-500/25; }
    .pill-tag-tint { @apply bg-pink-500/15 text-pink-300 border-pink-400/30 hover:bg-pink-500/25; }
    .pill-neutral { @apply bg-fg/10 text-fg/80 border-fg/25 hover:border-neon/50 hover:text-neon; }

    /* Items inside dropdown panel */
    .pill-cat { @apply bg-orange-500/10 text-orange-300 border-orange-400/30; }
    .pill-mode { @apply bg-blue-500/10 text-blue-300 border-blue-400/30; }
    .pill-tag { @apply bg-pink-500/10 text-pink-300 border-pink-400/30; }

    .filter-toggle[aria-expanded="true"] { @apply ring-2 ring-neon/60; }
    #exclusive-toggle[aria-pressed="true"] { @apply bg-neon/20 text-neon ring-2 ring-neon/50; }
    .filter-item { @apply cursor-pointer; }
    .filter-item[aria-pressed="true"] { @apply ring-2 ring-neon/60; }

    .filter-panel {
      @apply absolute z-50 mt-2 min-w-[14rem] max-w-xs bg-bg/95 backdrop-blur border border-fg/25 rounded-md shadow-lg p-2;
    }
    .filter-panel.hidden { display:none; }
    .panel-inner { @apply flex flex-wrap gap-2 overflow-y-auto max-h-72; }
    .panel-inner::-webkit-scrollbar { width:6px; }
    .panel-inner::-webkit-scrollbar-thumb { @apply bg-fg/30 rounded; }

    .tags-expand .pill-tag { @apply cursor-default; }

    .tag-toggle { @apply relative; }
    .tag-toggle[aria-expanded="true"] { @apply text-pink-200; }

    #result-count { @apply text-muted; }
  </style>

  <script type="module">
    const qs = s => document.querySelector(s);
    const qsa = s => Array.from(document.querySelectorAll(s));

    // Filtering State
    const selected = { category: new Set(), mode: new Set(), tag: new Set() };
    let exclusive = false;

    const gameGrid = qs('#game-grid');
    const clearBtn = qs('#clear-filters');
    const exclusiveBtn = qs('#exclusive-toggle');
    const resultCount = qs('#result-count');
    const panelToggles = qsa('.filter-toggle');
    const filterItems = qsa('.filter-item');

    function updateClearBtn() {
      const any = selected.category.size || selected.mode.size || selected.tag.size;
      if (clearBtn) clearBtn.disabled = !any;
    }

    function matchGame(li) {
      const type = li.getAttribute('data-type') || '';
      const mode = li.getAttribute('data-mode') || '';
      const tags = (li.getAttribute('data-tags') || '').split(',').filter(Boolean);
      const hasFilters = selected.category.size || selected.mode.size || selected.tag.size;
      if (!hasFilters) return true;

      if (!exclusive) {
        if (selected.category.has(type)) return true;
        if (selected.mode.has(mode)) return true;
        if (selected.tag.size) {
          for (const t of selected.tag) if (tags.includes(t)) return true;
        }
        return false;
      }

      if (selected.category.size && !selected.category.has(type)) return false;
      if (selected.mode.size && !selected.mode.has(mode)) return false;
      if (selected.tag.size) {
        for (const t of selected.tag) if (!tags.includes(t)) return false;
      }
      return true;
    }

    function applyFilters() {
      if (!gameGrid) return;
      const cards = qsa('#game-grid > li');
      let visible = 0;
      cards.forEach(li => {
        if (matchGame(li)) {
          li.classList.remove('hidden');
          visible++;
        } else {
          li.classList.add('hidden');
        }
      });
      if (resultCount) {
        resultCount.textContent = `Showing ${visible} of ${cards.length} games${exclusive ? ' (exclusive)' : ''}`;
      }
    }

    function toggleFilterItem(btn) {
      const type = btn.getAttribute('data-filter-type');
      const value = btn.getAttribute('data-value');
      if (!type || !value) return;
      const set = selected[type];
      const pressed = btn.getAttribute('aria-pressed') === 'true';
      if (pressed) {
        set.delete(value);
        btn.setAttribute('aria-pressed','false');
      } else {
        set.add(value);
        btn.setAttribute('aria-pressed','true');
      }
      updateClearBtn();
      applyFilters();
    }

    filterItems.forEach(btn => {
      btn.addEventListener('click', () => toggleFilterItem(btn));
      btn.addEventListener('keydown', e => {
        if (e.key === ' ' || e.key === 'Enter') {
          e.preventDefault();
          toggleFilterItem(btn);
        }
      });
    });

    clearBtn?.addEventListener('click', () => {
      ['category','mode','tag'].forEach(k => selected[k].clear());
      filterItems.forEach(f => f.setAttribute('aria-pressed','false'));
      updateClearBtn();
      applyFilters();
    });

    exclusiveBtn?.addEventListener('click', () => {
      exclusive = !exclusive;
      exclusiveBtn.setAttribute('aria-pressed', exclusive ? 'true' : 'false');
      applyFilters();
    });

    function closeAllPanels(exceptId) {
      panelToggles.forEach(t => {
        const id = t.getAttribute('data-panel');
        const panel = document.getElementById('panel-' + id);
        if (!panel) return;
        if (id === exceptId) return;
        panel.classList.add('hidden');
        t.setAttribute('aria-expanded','false');
      });
    }

    panelToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const id = toggle.getAttribute('data-panel');
        const panel = document.getElementById('panel-' + id);
        if (!panel) return;
        const open = !panel.classList.contains('hidden');
        if (open) {
          panel.classList.add('hidden');
          toggle.setAttribute('aria-expanded','false');
        } else {
          closeAllPanels(id);
          panel.classList.remove('hidden');
          toggle.setAttribute('aria-expanded','true');
        }
      });
    });

    document.addEventListener('click', e => {
      const target = e.target;
      if (!target.closest('[data-filter-wrapper]')) closeAllPanels();
    });
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape') closeAllPanels();
    });

    // Tag expansion
    function buildTag(tag) {
      const span = document.createElement('span');
      span.className = 'pill pill-tag';
      span.textContent = tag;
      return span;
    }

    function toggleTags(btn) {
      const expanded = btn.getAttribute('aria-expanded') === 'true';
      const container = btn.parentElement.querySelector('.tags-expand');
      if (!container) return;
      if (expanded) {
        // Hide
        btn.setAttribute('aria-expanded','false');
        container.classList.add('hidden');
        container.setAttribute('aria-hidden','true');
        container.textContent = '';
        const count = btn.getAttribute('data-count');
        btn.textContent = `Show ${count} tag${count === '1' ? '' : 's'}`;
      } else {
        // Show
        const all = (btn.getAttribute('data-all-tags') || '').split(',').filter(Boolean);
        container.textContent = '';
        all.forEach(t => container.appendChild(buildTag(t)));
        btn.setAttribute('aria-expanded','true');
        container.classList.remove('hidden');
        container.setAttribute('aria-hidden','false');
        const count = btn.getAttribute('data-count');
        btn.textContent = `Hide ${count} tag${count === '1' ? '' : 's'}`;
      }
    }

    qsa('.tag-toggle').forEach(btn => {
      btn.addEventListener('click', e => {
        e.stopPropagation();
        e.preventDefault(); // Prevent overlay anchor navigation
        toggleTags(btn);
      });
      btn.addEventListener('keydown', e => {
        if (e.key === ' ' || e.key === 'Enter') {
          e.preventDefault();
          toggleTags(btn);
        }
      });
    });

    // Init
    updateClearBtn();
    applyFilters();
  </script>
</Layout>
