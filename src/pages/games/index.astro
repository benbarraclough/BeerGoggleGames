---
import Layout from '../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../../lib/paths';
import { canonical } from '../../lib/urls';
import { excludeLegacyNoise } from '../../lib/filters';
import { playerModeSlug, playerModeLabel } from '../../lib/playerMode';

const raw = excludeLegacyNoise(await getCollection('games'));

const allGames = raw
  .map(g => {
    const full = g.slug ?? g.id;
    const parts = full.split('/');
    const leaf = parts[parts.length - 1];
    const type = (g.data.type || 'misc').toString();
    const rawMode = g.data.format || g.data.players;
    const modeSlug = rawMode ? playerModeSlug(rawMode) : '';
    const tags = Array.isArray(g.data.tags) ? g.data.tags : [];
    return {
      title: g.data.title,
      type,
      rawMode,
      modeSlug,
      tags,
      leaf,
      image: withBase(`images/${leaf}.webp`),
      href: withBase(`games/${leaf}/`)
    };
  })
  .sort((a,b)=> (a.title||'').localeCompare(b.title||''));

const categoryCounts = new Map<string, number>();
const modeCounts = new Map<string, { count: number; label: string }>();
const tagCounts = new Map<string, number>();

for (const g of allGames) {
  categoryCounts.set(g.type, (categoryCounts.get(g.type) || 0) + 1);
  if (g.modeSlug && g.rawMode) {
    const prev = modeCounts.get(g.modeSlug);
    if (prev) prev.count += 1;
    else modeCounts.set(g.modeSlug, { count: 1, label: playerModeLabel(g.rawMode) });
  }
  for (const t of g.tags) {
    tagCounts.set(t, (tagCounts.get(t) || 0) + 1);
  }
}

const categories = Array.from(categoryCounts.entries()).sort((a,b)=> a[0].localeCompare(b[0]));
const modes = Array.from(modeCounts.entries()).sort((a,b)=> a[1].label.localeCompare(b[1].label));
const tags = Array.from(tagCounts.entries()).sort((a,b)=> a[0].localeCompare(b[0]));

const pageCanonical = canonical(Astro.url.pathname, Astro.site);
---
<Layout
  title="Games"
  description="All drinking games. Filter or search by category, player mode, or tags."
  canonical={pageCanonical}
  wide={true}
>
  <h1 class="font-display text-4xl mb-4">Games</h1>
  <p class="text-sm text-muted mb-5">
    A complete collection A–Z. Use search or filters, or pick a
    <a class="hover:text-neon underline underline-offset-4" href={withBase('games/random')}>Random Game</a>.
  </p>

  <!-- Search -->
  <div class="mb-4 flex flex-wrap items-end gap-4">
    <label class="text-xs uppercase tracking-wide text-muted font-medium flex flex-col gap-1">
      Search
      <input
        id="game-search"
        type="search"
        placeholder="Search games..."
        class="w-72 max-w-[80vw] rounded border border-fg/30 bg-fg/5 px-3 py-2 text-sm focus:border-neon outline-none"
        autocomplete="off"
      />
    </label>
    <button id="game-search-clear" class="hidden text-[11px] underline underline-offset-4 hover:text-neon">Clear</button>
    <span id="search-hits" class="text-[11px] text-muted ml-auto"></span>
  </div>

  <!-- Filter Bar (unchanged) -->
  <div id="filter-bar" class="mb-6 space-y-3">
    <div class="flex flex-wrap gap-2 items-center">
      <span class="text-[11px] uppercase tracking-wide text-muted/70">Filters</span>

      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-cat-tint" data-panel="categories" aria-expanded="false">
          Categories
        </button>
        <div class="filter-panel hidden" id="panel-categories" role="group" aria-label="Categories">
          <div class="panel-inner">
            {categories.map(([cat, count]) => (
              <button
                type="button"
                class="filter-item pill pill-cat"
                data-filter-type="category"
                data-value={cat}
                aria-pressed="false"
              >
                <span>{cat}</span><span class="count">{count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-mode-tint" data-panel="modes" aria-expanded="false">
          Player Modes
        </button>
        <div class="filter-panel hidden" id="panel-modes" role="group" aria-label="Player Modes">
          <div class="panel-inner">
            {modes.map(([slug, info]) => (
              <button
                type="button"
                class="filter-item pill pill-mode"
                data-filter-type="mode"
                data-value={slug}
                aria-pressed="false"
              >
                <span>{info.label}</span><span class="count">{info.count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <div class="relative" data-filter-wrapper>
        <button type="button" class="filter-toggle pill pill-tag-tint" data-panel="tags" aria-expanded="false">
          Tags
        </button>
        <div class="filter-panel hidden" id="panel-tags" role="group" aria-label="Tags">
          <div class="panel-inner max-h-72">
            {tags.map(([t, count]) => (
              <button
                type="button"
                class="filter-item pill pill-tag"
                data-filter-type="tag"
                data-value={t}
                aria-pressed="false"
              >
                <span>{t}</span><span class="count">{count}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <button id="exclusive-toggle" type="button" class="pill pill-neutral" aria-pressed="false"
        title="Exclusive: must match each selected group (AND logic); all selected tags must be present.">
        Exclusive
      </button>
      <button id="clear-filters" type="button" class="pill pill-neutral disabled:opacity-40 disabled:cursor-not-allowed" disabled>
        Clear
      </button>

      <span id="result-count" class="text-xs text-muted ml-auto"></span>
    </div>
  </div>

  {allGames.length === 0 ? (
    <p class="text-muted">No games found.</p>
  ) : (
    <ul id="game-grid" class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 list-none p-0 m-0">
      {allGames.map(g => {
        const tagPopoverId = `tags-${g.leaf}`;
        return (
          <li
            class="relative group"
            data-type={g.type}
            data-mode={g.modeSlug || ''}
            data-tags={g.tags.join(',').toLowerCase()}
            data-title={(g.title||'').toLowerCase()}
            data-search-visible="true"
          >
            <div class="card-body flex flex-col h-full border border-fg/20 rounded-sm p-4 transition-colors pointer-events-none group-hover:border-neon/40">
              <picture class="mb-2 w-full allow-pointer">
                <img
                  src={g.image}
                  alt={g.title}
                  loading="lazy"
                  decoding="async"
                  class="w-full aspect-video object-cover rounded-sm border border-fg/15 bg-fg/5"
                  onerror="this.style.display='none'"
                />
              </picture>
              <span class="font-semibold leading-snug mb-2 transition-colors allow-pointer group-hover:text-neon">
                {g.title}
              </span>
              <div class="flex flex-wrap gap-2 text-[10px] uppercase tracking-wide font-semibold relative z-10">
                <span class="pill pill-cat allow-pointer">{g.type}</span>
                {g.modeSlug && <span class="pill pill-mode allow-pointer">{playerModeLabel(g.rawMode!)}</span>}
                {g.tags.length > 0 && (
                  <div class="relative group/tag inline-block allow-pointer">
                    <button
                      type="button"
                      class="pill pill-tag-count allow-pointer"
                      data-tag-trigger
                      data-open="false"
                      aria-expanded="false"
                      aria-controls={tagPopoverId}
                      title={`View tags (${g.tags.join(', ')})`}
                    >
                      {g.tags.length} tag{g.tags.length !== 1 && 's'}
                    </button>
                    <div
                      id={tagPopoverId}
                      class="tags-popover hidden absolute left-0 top-full mt-1 z-50 p-2 rounded-md border border-pink-400/30 bg-bg/95 backdrop-blur shadow-lg flex flex-wrap gap-2 min-w-[6rem] allow-pointer"
                      role="group"
                      aria-label={`${g.title} tags`}
                      data-tags-popover
                    >
                      {g.tags.map(t => <span class="pill pill-tag allow-pointer">{t}</span>)}
                    </div>
                  </div>
                )}
              </div>
            </div>
            <a
              href={g.href}
              aria-label={`View game: ${g.title}`}
              class="absolute inset-0 rounded-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neon/60 focus-visible:border-neon/60"
            >
              <span class="sr-only">{g.title}</span>
            </a>
          </li>
        );
      })}
    </ul>
  )}

  <style>
    .pill { @apply inline-flex items-center gap-1 px-2 py-1 rounded-full text-[10px] font-semibold tracking-wide whitespace-nowrap transition-colors select-none border; line-height:1.1; }
    .pill-cat-tint { @apply bg-orange-500/15 text-orange-300 border-orange-400/30 hover:bg-orange-500/25; }
    .pill-mode-tint { @apply bg-blue-500/15 text-blue-300 border-blue-400/30 hover:bg-blue-500/25; }
    .pill-tag-tint { @apply bg-pink-500/15 text-pink-300 border-pink-400/30 hover:bg-pink-500/25; }
    .pill-neutral { @apply bg-fg/10 text-fg/80 border-fg/25 hover:border-neon/50 hover:text-neon; }

    .pill-cat { @apply bg-orange-500/10 text-orange-300 border-orange-400/30; }
    .pill-mode { @apply bg-blue-500/10 text-blue-300 border-blue-400/30; }
    .pill-tag { @apply bg-pink-500/10 text-pink-300 border-pink-400/30; }
    .pill-tag-count { @apply bg-pink-500/15 text-pink-300 border-pink-400/30 hover:bg-pink-500/25 cursor-pointer; }
    .pill-tag-count[data-open="true"] { @apply ring-2 ring-neon/60; }

    .filter-toggle[aria-expanded="true"] { @apply ring-2 ring-neon/60; }
    #exclusive-toggle[aria-pressed="true"] { @apply bg-neon/20 text-neon ring-2 ring-neon/50; }
    .filter-item { @apply cursor-pointer; }
    .filter-item[aria-pressed="true"] { @apply ring-2 ring-neon/60; }

    .filter-panel { @apply absolute z-50 mt-2 min-w-[14rem] max-w-xs bg-bg/95 backdrop-blur border border-fg/25 rounded-md shadow-lg p-2; }
    .filter-panel.hidden { display:none; }
    .panel-inner { @apply flex flex-wrap gap-2 overflow-y-auto max-h-72; }
    .panel-inner::-webkit-scrollbar { width:6px; }
    .panel-inner::-webkit-scrollbar-thumb { @apply bg-fg/30 rounded; }

    #result-count { @apply text-muted; }

    .group\/tag:hover > .tags-popover,
    .group\/tag:focus-within > .tags-popover { display:flex; }
    .pill-tag-count[data-open="true"] + .tags-popover { display:flex; }

    .card-body { pointer-events:none; }
    .card-body .allow-pointer,
    .card-body button,
    .card-body .tags-popover { pointer-events:auto; }
  </style>

  <script type="module" src={withBase('scripts/games-filters.js')}></script>

  <script is:inline>
    (() => {
      const input = document.getElementById('game-search');
      const clear = document.getElementById('game-search-clear');
      const grid = document.getElementById('game-grid');
      const hitsEl = document.getElementById('search-hits');
      if(!input || !grid) return;
      const items = Array.from(grid.children);

      function applySearch() {
        const q = input.value.trim().toLowerCase();
        let hits = 0;
        items.forEach(li => {
          const title = li.getAttribute('data-title') || '';
          const tags = li.getAttribute('data-tags') || '';
          const type = li.getAttribute('data-type') || '';
          const match = !q || title.includes(q) || tags.includes(q) || type.includes(q);
          li.dataset.searchVisible = match ? 'true' : 'false';
        });
        items.forEach(li => {
          const hiddenByFilters = li.classList.contains('hidden');
          const visibleBySearch = li.dataset.searchVisible === 'true';
          li.style.display = (hiddenByFilters || !visibleBySearch) ? 'none' : '';
          if(!hiddenByFilters && visibleBySearch) hits++;
        });
        clear.classList.toggle('hidden', q.length === 0);
        if (hitsEl) hitsEl.textContent = q ? `${hits} match${hits===1?'':'es'}` : '';
      }

      input.addEventListener('input', applySearch);
      clear.addEventListener('click', () => { input.value=''; applySearch(); input.focus(); });
      applySearch();
    })();
  </script>

  <p class="mt-10 text-sm">
    <a class="hover:text-neon underline underline-offset-4" href={withBase('/')}>← Back to Home</a>
  </p>
</Layout>
