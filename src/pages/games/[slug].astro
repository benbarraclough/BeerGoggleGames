---
import Layout from '../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { canonical } from '../../lib/urls';
import { withBase } from '../../lib/paths';
import { playerModeLabel, playerModeSlug } from '../../lib/playerMode';

export async function getStaticPaths() {
  const entries = await getCollection('games');
  const leafMap = new Map<string, any>();
  const duplicates: string[] = [];
  for (const e of entries) {
    const leaf = (e.slug ?? e.id).split('/').pop()!;
    if (leafMap.has(leaf)) duplicates.push(leaf);
    else leafMap.set(leaf, e);
  }
  if (duplicates.length) {
    throw new Error(
      `[games] Duplicate leaf slug(s) detected: ${duplicates.join(', ')}. Leaves must be unique for flat /games/<slug>/ routes.`
    );
  }
  return Array.from(leafMap.keys()).map(leaf => ({ params: { slug: leaf } }));
}

const leaf = Astro.params.slug;
const allEntries = await getCollection('games');
const leafMap = new Map<string, any>();
for (const e of allEntries) {
  const l = (e.slug ?? e.id).split('/').pop()!;
  if (!leafMap.has(l)) leafMap.set(l, e);
}
const entry = leafMap.get(leaf);
if (!entry) throw new Error(`Game not found for leaf "${leaf}"`);

const { Content } = await entry.render();

const title = entry.data.title;
const description =
  entry.data.excerpt ||
  entry.data.description ||
  `Drinking game: ${title}`;

const type = (entry.data.type || '').toString();
const rawMode = entry.data.format || entry.data.players;
const modeSlug = rawMode ? playerModeSlug(rawMode) : '';
const tags: string[] = Array.isArray(entry.data.tags) ? entry.data.tags : [];

const coverFile = entry.data.cover || `${leaf}.webp`;
const cover = withBase(`images/${coverFile}`);
const pageCanonical = canonical(Astro.url.pathname, Astro.site);

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'CreativeWork',
  name: title,
  description,
  genre: type,
  keywords: [...tags, type, modeSlug].filter(Boolean).join(', ')
};
---
<Layout title={title} description={description} canonical={pageCanonical} image={cover}>
  <article class="prose-invert max-w-none">
    <header class="mb-6">
      <h1 class="font-display text-4xl mb-2">{title}</h1>
      <div class="flex flex-wrap gap-2 text-[10px] uppercase tracking-wide font-semibold">
        {type && <span class="pill pill-cat">{type}</span>}
        {rawMode && <span class="pill pill-mode">{playerModeLabel(rawMode)}</span>}
        {tags.map(t => <span class="pill pill-tag">{t}</span>)}
      </div>
    </header>

    <!-- MDX content (may include its own hero/figure) -->
    <Content />

    <p class="mt-10 text-xs text-muted">
      <a class="hover:text-neon underline underline-offset-4" href={withBase('games/')}>Back to Games Index</a>
    </p>
  </article>

  <style>
    .pill {
      @apply inline-flex items-center gap-1 px-2 py-1 rounded-full text-[10px] font-semibold tracking-wide whitespace-nowrap transition-colors select-none border;
      line-height:1.1;
    }
    .pill-cat { @apply bg-orange-500/10 text-orange-300 border-orange-400/30; }
    .pill-mode { @apply bg-blue-500/10 text-blue-300 border-blue-400/30; }
    .pill-tag { @apply bg-pink-500/10 text-pink-300 border-pink-400/30; }
  </style>

  <!-- GLOBAL list fix so MDX lists show bullets/numbers even with reset styles -->
  <style is:global>
    article.prose-invert ul,
    article.prose-invert ol {
      list-style: revert;
      padding-left: 1.25rem;
      margin: 0 0 1rem;
    }
    article.prose-invert li { margin: 0.25rem 0; }
    article.prose-invert li::marker { color: var(--fg-muted, currentColor); }
  </style>

  <script type="application/ld+json">
    {JSON.stringify(jsonLd, null, 2)}
  </script>
</Layout>
