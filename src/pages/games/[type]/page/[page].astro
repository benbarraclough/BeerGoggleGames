---
import Layout from '../../../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { canonical } from '../../../../lib/urls';
import { withBase } from '../../../../lib/paths';
import { playerModeClass, playerModeLabel } from '../../../../lib/playerMode';

const PAGE_SIZE = 36; // <- Added constant

export async function getStaticPaths() {
  const games = await getCollection('games').catch(()=>[]);
  const counts = new Map<string, number>();
  for (const g of games) {
    const t = g.data.type || 'misc';
    counts.set(t, (counts.get(t) || 0) + 1);
  }
  const paths: any[] = [];
  for (const [type, count] of counts.entries()) {
    const pages = Math.ceil(count / PAGE_SIZE);
    for (let p = 2; p <= pages; p++) {
      paths.push({ params: { type, page: String(p) } });
    }
  }
  return paths;
}

const { type, page } = Astro.params;
const currentPage = Math.max(2, parseInt(String(page), 10) || 2);

const all = (await getCollection('games'))
  .filter(g => (g.data.type || 'misc') === type)
  .sort((a,b)=> (a.data.title||'').localeCompare(b.data.title||''));

const totalPages = Math.ceil(all.length / PAGE_SIZE);
if (currentPage > totalPages) {
  throw new Error('Page out of range');
}

const start = (currentPage - 1) * PAGE_SIZE;
const pageItems = all.slice(start, start + PAGE_SIZE);
const pageCanonical = canonical ? canonical(Astro.url.pathname, Astro.site) : undefined;
const title = `${type} Games – Page ${currentPage}`;
const description = `All ${type} games. Page ${currentPage} of ${totalPages}.`;
---
<Layout title={title} description={description} canonical={pageCanonical} wide={true}>
  <h1 class="font-display text-4xl mb-4">{type} Games</h1>
  <p class="text-sm text-muted mb-6">
    {all.length} game{all.length !== 1 && 's'} • Page {currentPage} of {totalPages}.
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase(`games/${type}/`)}>First Page</a>
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('games/')}>All Types</a>
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('games/all/')}>A–Z</a>
  </p>

  {pageItems.length === 0 ? (
    <p class="text-muted">No games on this page.</p>
  ) : (
    <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 list-none p-0 m-0">
      {pageItems.map(g => {
        const parts = g.slug.split('/');
        const shortSlug = parts[parts.length -1];
        return (
          <li class="border border-fg/15 hover:border-fg/40 transition-colors p-4">
            <a class="font-semibold hover:text-neon block" href={withBase(`games/${type}/${shortSlug}/`)}>{g.data.title}</a>
            <div class="mt-2 flex flex-wrap gap-2">
              {g.data.players && <span class={playerModeClass(g.data.players)}>{playerModeLabel(g.data.players)}</span>}
              {g.data.type && <span class="mode-pill">{g.data.type}</span>}
              {Array.isArray(g.data.tags) && g.data.tags.slice(0,2).map((t:any) => <span class="mode-pill">{t}</span>)}
            </div>
          </li>
        );
      })}
    </ul>
  )}

  <nav class="mt-8 text-sm flex flex-wrap gap-2 items-center" aria-label="Pagination">
    <span class="text-muted">Pages:</span>
    <a href={withBase(`games/${type}/`)} class="px-2 py-1 border border-fg/30 rounded hover:border-neon hover:text-neon">1</a>
    {Array.from({ length: totalPages - 1 }, (_, i) => {
      const p = i + 2;
      return p === currentPage
        ? <span class="px-2 py-1 border border-neon/60 text-neon rounded">{p}</span>
        : <a href={withBase(`games/${type}/page/${p}/`)} class="px-2 py-1 border border-fg/30 rounded hover:border-neon hover:text-neon">{p}</a>;
    })}
  </nav>
</Layout>
