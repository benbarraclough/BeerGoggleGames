---
import Layout from '../../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { canonical } from '../../../lib/urls';
import { withBase } from '../../../lib/paths';
import { playerModeClass, playerModeLabel } from '../../../lib/playerMode';

export async function getStaticPaths() {
  const games = await getCollection('games').catch(()=>[]);
  const types = Array.from(new Set(games.map(g => g.data.type || 'misc')));
  return types.map(type => ({ params: { type } }));
}

const { type } = Astro.params;

const all = (await getCollection('games'))
  .filter(g => (g.data.type || 'misc') === type)
  .sort((a,b)=> (a.data.title||'').localeCompare(b.data.title||''));

const pageCanonical = canonical ? canonical(Astro.url.pathname, Astro.site) : undefined;
const title = `${type} Games`;
const description = `All ${type} drinking games.`;
---
<Layout title={title} description={description} canonical={pageCanonical} wide={true}>
  <h1 class="font-display text-4xl mb-4">{title}</h1>
  <p class="text-sm text-muted mb-6">
    {all.length} game{all.length !== 1 && 's'} in this category.
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('games/')}>All Types</a>
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('games/all/')}>Aâ€“Z</a>
    <a class="hover:text-neon underline underline-offset-4 ml-4" href={withBase('games/random')}>Random</a>
  </p>

  {all.length === 0 ? (
    <p class="text-muted">No games found.</p>
  ) : (
    <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 list-none p-0 m-0">
      {all.map(g => {
        const parts = g.slug.split('/');
        const shortSlug = parts[parts.length -1];
        const typeDir = g.data.type || parts[0];
        return (
          <li class="border border-fg/15 hover:border-fg/40 transition-colors p-4">
            <a class="font-semibold hover:text-neon block" href={withBase(`games/${typeDir}/${shortSlug}/`)}>{g.data.title}</a>
            <div class="mt-2 flex flex-wrap gap-2">
              {g.data.players && <span class={playerModeClass(g.data.players)}>{playerModeLabel(g.data.players)}</span>}
              {g.data.type && <span class="mode-pill">{g.data.type}</span>}
              {Array.isArray(g.data.tags) && g.data.tags.slice(0,2).map((t:any) => <span class="mode-pill">{t}</span>)}
            </div>
          </li>
        );
      })}
    </ul>
  )}
</Layout>
