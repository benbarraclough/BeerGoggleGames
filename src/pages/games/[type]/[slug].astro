---
import Layout from '../../../components/Layout.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../../../lib/paths';
import { tagSlug } from '../../../lib/tags';

export async function getStaticPaths() {
  const games = await getCollection('games');
  return games.map(g => {
    // Canonical type taken from frontmatter (fallback misc)
    // Normalize to URL-friendly lowercase-hyphen
    const rawType = (g.data.type || 'misc').toString().trim();
    const type = rawType
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9\-]/g, '');

    // Leaf slug comes from the file slug (last path part)
    const parts = g.slug.split('/').filter(Boolean);
    const leaf = parts[parts.length - 1];

    return {
      params: { type, slug: leaf },
      props: { entry: g, type }
    };
  });
}

const { entry, type } = Astro.props;
const { Content } = await entry.render();

const title = entry.data.title;
const description = entry.data.excerpt || `Game: ${title}.`;
const players = entry.data.players;
const tags: string[] = Array.isArray(entry.data.tags) ? entry.data.tags : [];
---
<Layout title={title} description={description}>
  <article class="prose prose-invert max-w-none">
    <h1 class="font-display text-4xl mb-2">{title}</h1>

    <div class="flex flex-wrap gap-2 mb-4">
      {players && <span class:list={['mode-pill', `mode-pill-${players}`]}>{players}</span>}
      {type && <span class="mode-pill">{type}</span>}
      {tags.map(t => {
        const slug = tagSlug(t);
        return (
          <a href={withBase(`tags/${slug}/`)} class="tag-pill" aria-label={`Tag: ${t}`}>{t}</a>
        );
      })}
      {tags.length > 0 && (
        <a href={withBase('tags/')} class="tag-pill" aria-label="Browse all tags">All Tags</a>
      )}
    </div>

    <Content />
  </article>

  <p class="mt-10 text-sm">
    <a class="hover:text-neon underline underline-offset-4" href={withBase(`games/${type}/`)}>‚Üê More {type} games</a>
  </p>
</Layout>
